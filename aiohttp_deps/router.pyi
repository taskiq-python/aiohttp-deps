from typing import Any, Awaitable, Callable, Iterable, Type, Union

import typing_extensions
from aiohttp import web
from aiohttp.abc import AbstractView

_Handler: typing_extensions.TypeAlias = Callable[..., Awaitable[web.StreamResponse]]

_ViewedHandler: typing_extensions.TypeAlias = Union[Type[AbstractView], _Handler]

_Deco: typing_extensions.TypeAlias = Callable[[_ViewedHandler], _ViewedHandler]

class Router(web.RouteTableDef):
    def head(self, path: str, **kwargs: Any) -> _Deco: ...
    def get(self, path: str, **kwargs: Any) -> _Deco: ...
    def post(self, path: str, **kwargs: Any) -> _Deco: ...
    def put(self, path: str, **kwargs: Any) -> _Deco: ...
    def patch(self, path: str, **kwargs: Any) -> _Deco: ...
    def delete(self, path: str, **kwargs: Any) -> _Deco: ...
    def options(self, path: str, **kwargs: Any) -> _Deco: ...
    def view(self, path: str, **kwargs: Any) -> _Deco: ...
    def add_routes(
        self,
        router: Iterable[web.AbstractRouteDef],
        prefix: str = "",
    ) -> None: ...
